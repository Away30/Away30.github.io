<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>电影票根博物馆</title>
    <link href="/2023/01/23/%E7%94%B5%E5%BD%B1%E7%A5%A8%E6%A0%B9%E5%8D%9A%E7%89%A9%E9%A6%86/"/>
    <url>/2023/01/23/%E7%94%B5%E5%BD%B1%E7%A5%A8%E6%A0%B9%E5%8D%9A%E7%89%A9%E9%A6%86/</url>
    
    <content type="html"><![CDATA[<h2 id="《流浪地球2》"><a href="#《流浪地球2》" class="headerlink" title="《流浪地球2》"></a>《流浪地球2》</h2><p>![ ](/img/流浪地球2 1.png)<br>![ ](/img/流浪地球2 2.jpg)<br>![ ](/img/流浪地球2 3.jpg)<br>![ ](/img/流浪地球2 4.jpg)<br>中国人才能写出的科幻故事，以好莱坞的视觉效果呈现<br>太空电梯，空间站，数字生命计划…<br>中式的硬核浪漫，中式的星际穿越<br>不是老套的单枪匹马的英雄主义，而是宏大的人类命运共同体<br>老戏骨们的演技对于这部电影是点睛之笔，使整部戏活了过来，李雪健的决断，刘德华对女儿的爱，以及沙溢作为引爆员出列时的坚毅<br>整体上瑕不掩瑜，中国科幻电影的又一里程碑<br>观于2023.1.22</p><h2 id="《满江红》"><a href="#《满江红》" class="headerlink" title="《满江红》"></a>《满江红》</h2><p><img src="/img/%E6%BB%A1%E6%B1%9F%E7%BA%A2.png" alt=" "><br>老谋子对大场面的把握确实是好，结尾的全军背诵满江红让人热血沸腾<br>整体节奏把握不错，每个场景用俯拍的跑动以及音乐衔接<br>但是感觉前半部分是剧本杀一般，一些反转也能猜到，而最后背诵满江红和前面的剧情感觉联系较弱。<br>总体还是一部不错的影片<br>观于2023.1.25</p><h2 id="《银河护卫队3》"><a href="#《银河护卫队3》" class="headerlink" title="《银河护卫队3》"></a>《银河护卫队3》</h2><p>![ ](/img/银河1 (1).JPG)<br>![ ](/img/银河1 (2).JPG)<br>![ ](/img/银河1 (3).JPG)<br>![ ](/img/银河1 (4).JPG)<br>![ ](/img/银河1 (5).JPG)<br>![ ](/img/银河1 (6).JPG)</p><p>2014 雨夜<br>那年的我看完银河护卫队1，将手机的壁纸换成了他们的样子，后排的车窗开的一条小缝飘进几滴细雨，融入思绪。<br>耳机中播放着Come And Get Your Love，回想着电影的剧情，每个人性格都鲜明，很喜欢那种自由没有拘束的样子，主角星爵有点自负的样子，却更使得形象生动。<br>缘分有的时候就是如此，转眼9年过去了，那个青涩的男孩也已经长大。<br>我又坐在了影院，配乐还依旧是那个味道，有温情也有激情。<br>聚有时，散有期，下次见面会是什么时候呢？<br>Bye Captain Peter Quill &amp; Rocket<br>Bye Guardians of the Galaxy<br>观于2023.5.5</p><h2 id="《蜘蛛侠：纵横宇宙》"><a href="#《蜘蛛侠：纵横宇宙》" class="headerlink" title="《蜘蛛侠：纵横宇宙》"></a>《蜘蛛侠：纵横宇宙》</h2><p>![ ](/img/蜘蛛侠1 (1).JPG)<br>![ ](/img/蜘蛛侠1 (2).JPG)<br>![ ](/img/蜘蛛侠1 (3).JPG)<br>![ ](/img/蜘蛛侠1 (1).PNG)</p><p>可以说是最期待的动画续作了，真的没有辜负期待<br>顶级美术和配乐，，眼花缭乱的潮酷美学，每一帧都是壁纸啊<br>世界本身色彩的富丽，呈现出契合角色本身的明亮，而雨夜的布鲁克林，却更显得清冷。<br>“每一个平行宇宙里，格温都会爱上蜘蛛侠，但是结果都不尽人意”<br>我好像早就习惯于命运的安排，谁又本应该成为那个蜘蛛侠？<br>观于2023.6.2</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>感想</tag>
      
      <tag>电影</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GRE单词（更新）</title>
    <link href="/2022/10/19/GRE%E5%8D%95%E8%AF%8D/"/>
    <url>/2022/10/19/GRE%E5%8D%95%E8%AF%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="单词"><a href="#单词" class="headerlink" title="单词"></a>单词</h2><p>lambast/deride 谴责，嘲讽<br>perplexing/enigmatic 令人困惑的<br>preclude 阻碍<br>pecuniary 金钱的<br>mitigate/abate 减轻<br>beget 产生<br>dichotomous 对立的<br>rant/ diatribe 痛骂/ 诽谤<br>artlessness 天真<br>malfeasance/ fraudulence 渎职，不法行为/ 欺诈<br>palliate/damp 减弱<br>insurmountable 不可克服的<br>itinerant/peripatetic 巡回的<br>proscriptive 被放逐的<br>contentious 有争议的<br>endemic 地方性的<br>fraught 造成忧虑（或紧张）的<br>onerous &lt;正式&gt;费力的<br>intractable 倔强的<br>opprobrium/disdain 耻辱/鄙视<br>stymie 阻碍<br>acrimony/bitterness 刻薄，怨言<br>scolding/admonishment 责骂<br>unimpeachable 无可指责的<br>unblemished 无瑕疵的<br>disparage 贬低<br>lull 使安静，平息<br>shrieking/ caterwauling 尖叫<br>unalloyed 纯粹的<br>idiosyncratic 独特的<br>hodgepodge / patchwork 混杂物<br>equivocal 模棱两可的<br>contingent/circumstantial 偶然的<br>prophetic 预言的<br>rebuke/mockery 指责、讽刺<br>rapacious / avaricious 贪婪的<br>check/stem 抑制<br>venerable 受尊重的<br>lugubrious 悲伤的<br>insatiable 无法满足的<br>gainsay 反驳<br>protean 千变万化的<br>misgiving/trepidation 忧虑/恐惧<br>purveyor 承办商<br>inimical / deleterious 有害的<br>rings true 听来真实可靠<br>hubristic 傲慢的<br>buttressing 支持<br>totemic/emblematic 象征的<br>extirpate 消除<br>estranged 分居的；疏远的<br>panacea/remedy 治疗<br>somnolent / lethargic 无精打采的<br>inferable 能推理的<br>antediluvian/archaic 陈旧的<br>unwieldy 笨重的<br>tenacity 决心<br>counterproductive 事与愿违的<br>galvanize 刺激<br>burgeoning 激增<br>approbation/adulation 称赞<br>scant 有限的<br>castigate/ chastise 严厉批评<br>profusion 大量<br>preternatural 超常的<br>precociousness 成熟<br>waning/ebbing 减小<br>hone 打磨<br>laconic/taciturn 沉默寡言的<br>detracting/ deprecatory 贬低的/ 反对的<br>showy/meretricious 艳丽的<br>oust 罢免<br>verisimilitude 逼真<br>truculent/pugnacious 好斗的<br>attenuate 减弱<br>limpid / pellucid 清晰的<br>canned/formulaic 简单的<br>quirky 古怪的</p><p>3000词<br>List1</p><p>abdicate 正式放弃（权利，责任）<br>abet 帮助/鼓励<br>abeyance 中止/搁置<br>abject 无精打采的/悲惨的（地位身份）/卑微的<br>abjure 发誓放弃/抵制<br>abominate 憎恶<br>abrogate 官方正式废除<br>abstain 自我克制<br>abstemious 有节制的<br>abstruse 难以理解的<br>abysmal 极低的/很深的（程度）<br>accessory 辅助的/帮凶<br>acclimate 使适应<br>accolade 同意/赞扬<br>accost 以挑衅的形式搭讪<br>accrete 逐渐增长<br>acme 顶点/最佳典范<br>adamant 固执的<br>ad lib 即兴的<br>admonish 建议/责备<br>adulate 极度谄媚<br>adulterate 掺杂<br>adumbrate 预示着/ 有保留的揭露<br>advert 提到<br>aggravate 使恼火/加重<br>aggrieve 使苦恼<br>agog 极度感兴趣的<br>alacrity敏捷<br>alibi 托辞/借口<br>amalgamate 合并<br>ambrosial 香的<br>ameliorate 改善/改进<br>amicable 友善的</p><p>List 2<br>apocalyptic 预言的/重要的/夸大的<br>apocryphal 假的<br>apoplectic 极度愤怒的<br>apostasy 背叛/放弃信仰<br>appall 使惊恐<br>apposite 合适的/相关的<br>appreciable 可感知的<br>approbation 同意<br>apropos 相关的<br>apt 有…倾向/合适的/聪明的<br>archaic 过时的<br>argot 暗号，俚语，黑话<br>arresting 吸引人的<br>arrhythmic 不规律的<br>ascetic adj. 苦行的；禁欲主义的 n. 苦行者；禁欲者<br>aseptic 消毒的<br>askew 歪斜的<br>asperity （气候等的）严酷；艰苦的条件/（性格）粗暴<br>assertive 自信的<br>assiduous  刻苦的，勤勉的<br>assuage  平息；缓和<br>astounding 令人震惊的<br>asunder  化为碎片地，被撕裂<br>asylum 收容所<br>atone 赎罪 弥补<br>atrocious 残暴的<br>attenuate （使）减弱<br>audacious 无畏的；鲁莽的<br>avarice 贪财<br>aver 断言/极力声明<br>aversion 厌恶，憎恶/讨厌的人<br>avid 渴望的<br>awash 被淹没的/泛滥的<br>awe 敬畏<br>awning 雨篷<br>awry 弯曲的/走样的<br>axiomatic 公理的；自明的<br>backhanded 间接的/虚情假意的<br>badinage 打趣<br>bait 逗弄/引诱<br>baleful 恶意的；有害的<br>balk 阻碍/拒绝<br>ballad 歌谣<br>banal 平庸的，陈腐的<br>bane 祸根/有害物质<br>banish 驱逐，赶走；将……驱逐出境</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>托福</tag>
      
      <tag>英语</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>野马优化器算法</title>
    <link href="/2022/06/08/%E9%87%8E%E9%A9%AC%E4%BC%98%E5%8C%96%E5%99%A8%E7%AE%97%E6%B3%95/"/>
    <url>/2022/06/08/%E9%87%8E%E9%A9%AC%E4%BC%98%E5%8C%96%E5%99%A8%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>&emsp;&emsp;还记得那是一个普通的周末，为了应付老师的要求，不得不重新去看新的算法论文，然后就看到了这个野马优化器算法，2021年提出的，也算是一种缘分吧。</p><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>&emsp;&emsp;算法由Iraj Naruei等人于2021年提出，主要模拟了野马种群的放牧、交配、领导者的交流和选择这三种行为。因其在CEC2017、CEC2019等测试函数上具有较好的实验结果，而在未来具有广泛的应用前景。</p><p> &emsp;&emsp;总体来说，马可以根据其社会组织（领土和非领土）分为两类，在本篇文章，我们重点在于非领土类，它们是由稳定的家庭群体或后宫组成的马群，如小马驹、种马和母马。种马和母马都生活在一起，并在放牧中相互影响。同时为了防止乱伦，小马驹长大后必须离开他们的群体，加入其他群体建立自己的家庭。野马优化器就是使用放牧、交配、领导者的交流和选择这三种行为对问题进行优化。</p><h2 id="主要步骤及过程"><a href="#主要步骤及过程" class="headerlink" title="主要步骤及过程"></a>主要步骤及过程</h2><p><strong>1.</strong> 创建初始种群并形成马群并选择领导者；<br><strong>2.</strong> 马的放牧行为；<br><strong>3.</strong> 马的交配行为；<br><strong>4.</strong> 由领导（种马）领导和领导小组；<br><strong>5.</strong> 领导交流和选拔。</p><h3 id="创建初始种群"><a href="#创建初始种群" class="headerlink" title="创建初始种群"></a>创建初始种群</h3><p> &emsp;&emsp;对初始马群进行分组，如果N是总体的成员数，则组数为是G=[N×PS]. PS 是总种群中种马的百分比。所以我们根据组的数量分出领导者G（种马），其余成员（N - G），在这些组中平均分配。在算法开始时随机选择组的领导者，在后期阶段，根据组成员之间的适应度（最佳适应度函数）来选择他们。<br><img src="/img/%E9%87%8E%E9%A9%AC%E4%BC%98%E5%8C%96%E5%99%A8.png" alt=" "></p><center>种群初始化示意图</center><p><img src="/img/%E9%87%8E%E9%A9%AC%E4%BC%98%E5%8C%96%E5%99%A82.png" alt=" "></p><center>原始种群形成群体的过程图</center><h3 id="放牧行为"><a href="#放牧行为" class="headerlink" title="放牧行为"></a>放牧行为</h3><p>&emsp;&emsp;如上一节所述，小马驹通常大部分时间都在他们的群体周围吃草。为了实现放牧行为，我们将种马视为放牧区的中心，群体成员在中心周围搜索（放牧）：<br>$$<br>X_{G, j}^{i}=2 Z \cos (2 \pi R Z) \times\left(\text { Stallion }<em>{G, j}-X</em>{G, j}^{i}\right)+\text { Stallion }_{G, j}<br>$$<br>&emsp;&emsp;式中Stallion为领导者的位置，R 为[-2,2]内的随机数，主要控制个体与领导者间的角度，自适应机制Z 的计算方式为：</p><p>$$<br>P=\vec{R} 1&lt;T D R, I D X=(P==0) ; \quad Z=R 2 \Theta I D X+\vec{R} 3 \Theta(\sim I D X)<br>$$</p><p>&emsp;&emsp;其中P 是由0和1组成的向量，R1、R3均为[0,1]范围内均匀分布的随机向量，R2为[0,1]内一随机值。满足条件(P==0)的随机向量R1返回的IDX索引。Θ这个符号即点乘。TDR为由1线性递减至0的系数：</p><p>$$<br>TDR=1-iter\times （\frac{1}{maxiter} ）<br>$$</p><p>其中<em>iter</em>为当前迭代次数，<em>maxite</em>r为最大迭代次数。</p><h3 id="交配行为"><a href="#交配行为" class="headerlink" title="交配行为"></a>交配行为</h3><p>&emsp;&emsp;与其他动物相比，马的独特行为之一是将小马驹从群体中分离出来并与它们交配的行为。小马驹在青春期前离开这个群体，雄性小马驹加入单身马群，雌性小马驹加入另一个家庭群体，以达到青春期并寻找配偶。为了模拟马的交配行为，使用公式：</p><p>$$<br>X_{G, k}^{p}=\operatorname{Crossover}\left(X_{G, i}^{q}, X_{G, j}^{z}\right), i \neq j \neq k, q=z=\text { end }<br>$$</p><p>&emsp;&emsp;这里Xp_G_K表示种群k中个体p离群后再次进入种群k的个体位置，所以很明显，后面括号里的两个位置即为其父母的位置。可以看出，此阶段主要针对种群内适应度值最差的个体进行操作，目的即为提升种群多样性。</p><h3 id="集团领导"><a href="#集团领导" class="headerlink" title="集团领导"></a>集团领导</h3><p>&emsp;&emsp;领导者（种马）将带领其他组成员到合适的区域（水坑）。领导者（种马）也将争夺水坑，带领优势组首先使用水坑，直到优势组离开，其他组才能使用水坑。用公式模拟此行为：</p><p>$$<br>\overline{\text { Stallion }} G, j=\left\{\begin{array}{l}2 Z \cos (2 \pi R Z) \times\left(W H-\text { Stallion }<em>{G, j}\right)+W H, \text { rand }&gt;0.5 \\ 2 Z \cos (2 \pi R Z) \times\left(W H-\text { Stallion }</em>{G, j}\right)-W H, \text { rand } \leq 0.5\end{array}\right.<br>$$</p><p>&emsp;&emsp;式中WH为栖息地的位置(也就是当前最优个体位置)，R、Z 的定义与前文相同。下图展示了领导者相对于栖息地的位置更新过程：</p><p><img src="/img/%E9%87%8E%E9%A9%AC%E4%BC%98%E5%8C%96%E5%99%A83.png" alt=" "></p><center>领导者相对于栖息地的位置更新</center><h3 id="领导交流与选拔"><a href="#领导交流与选拔" class="headerlink" title="领导交流与选拔"></a>领导交流与选拔</h3><p>&emsp;&emsp;在开始，领导者是随机选择的。之后，比较组中马驹的适应度值选择领导者。为了模拟领导交流与选拔，使用了公式：</p><p>$$<br>\mathrm{Stallion} <em>{G,j}=\begin{cases}<br>  X</em>{G,j} &amp; \text{ if } cost(X_{G,j})&lt; cost({Stallion} <em>{G,j})\<br>  {Stallion} _{G,j}&amp; \text{ if } cost(X</em>{G,j})&gt; cost({Stallion} _{G,j})<br>\end{cases}<br>$$</p><p>此处cost函数为适应度函数，算法伪代码如下：<br><img src="/img/%E9%87%8E%E9%A9%AC%E4%BC%98%E5%8C%96%E5%99%A84.png" alt=" "></p><center>伪代码</center><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&emsp;&emsp;总体来说，野马优化器考虑的较为全面，涉及了精英引导、分群探索、群间交流等方面。不过从测试中来看其跳出局部最优值的能力仍有待提高。对于数据集的处理仍存在较大问题，迭代后期容易陷入局部极值的问题。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>元启发算法</tag>
      
      <tag>论文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bs4解析和xpath解析</title>
    <link href="/2022/02/12/python%E7%88%AC%E8%99%AB%E4%B9%8Bbs4%E8%A7%A3%E6%9E%90%E5%92%8Cxpath%E8%A7%A3%E6%9E%90/"/>
    <url>/2022/02/12/python%E7%88%AC%E8%99%AB%E4%B9%8Bbs4%E8%A7%A3%E6%9E%90%E5%92%8Cxpath%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="bs4解析"><a href="#bs4解析" class="headerlink" title="bs4解析"></a>bs4解析</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理:"></a>原理:</h2><ul><li>1.实例化一个BeautifulSoup对象，并且将页面源码数据加载到该对象中</li><li>2.通过调用BeautifulSoup对象中相关的属性或者方法进行标签定位和数据提取</li></ul><h2 id="如何实例化BeautifulSoup对象"><a href="#如何实例化BeautifulSoup对象" class="headerlink" title="如何实例化BeautifulSoup对象:"></a>如何实例化BeautifulSoup对象:</h2><p> from bs4 import BeautifulSoup<br>BeautifulSoup(参数一,参数二)<br>参数一为文件描述符，参数二为解析器，一般为’lxml’<br>一对象的实例化:</p><ul><li>1.将本地的html文档中的数据加载到该对象中<figure class="highlight ini"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">fp</span> = open( <span class="hljs-string">&#x27;./test.html&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-attr">soup</span>=BeautifulSoup(fp,<span class="hljs-string">&#x27;lxml&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li>2.将互联网上获取的页面源码加载到该对象中<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">page_text</span> =response.text<br><span class="hljs-attr">soup</span>=BeatifulSoup(page_text,<span class="hljs-string">&#x27;lxml&#x27;</span>)<br></code></pre></td></tr></table></figure>soup指初始化的BeautifulSoup对象</li></ul><h2 id="用于数据解析的方法和属性"><a href="#用于数据解析的方法和属性" class="headerlink" title="用于数据解析的方法和属性:"></a>用于数据解析的方法和属性:</h2><p><strong>1</strong>.soup.tagName:返回的是文档中<strong>第一次</strong>出现的tagName对应的标签<br><strong>2</strong>.soup.find():</p><p>(1).find( ‘tagName’):等同于soup.tagName<br>    (2).属性定位:soup.find(‘div’,class_/id/或者其他属性=’song’)<br>    定位到&lt; div class=”song”&gt;/&lt; div id=”song”&gt;的标签下<br>    class如果没有加_则代表关键字</p><p><strong>3</strong>.soup.find_all(‘tagName’):返回符合要求的所有标签(列表)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml">soup对象:<br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tang&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span> <span class="hljs-attr">title</span>= <span class="hljs-string">&quot;ging&quot;</span>&gt;</span>清明时节雨纷纷,路上行人欲断魂,借问酒家何处有,牧童遥指杏花村<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>&lt;/1i&gt;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.163.com&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;qin&quot;</span>&gt;</span>秦时明月汉时关，万里长征人未还,但使龙城飞将在，不教胡马度阴山<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>&lt;/1i&gt;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot; http://ww.126.com&quot;</span><span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;qi &quot;</span>&gt;</span>歧王宅里寻常见，崔九堂前几度闻，正是江南好风景,落花时节又逢君<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http: //www.sina.com&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;du&quot;</span>&gt;</span>杜甫<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.dudu.com&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;du&quot;</span>&gt;</span>杜牧<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>杜小月<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>度蜜月<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://ww.hana.com”id=&quot;</span><span class="hljs-attr">feng</span>&quot;&gt;</span>凤凰台上凤凰游，凤去台空江自流，吴宫花草埋幽径，晋代衣冠成古丘<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>4</strong>.select:<br>    - select(‘某种选择器(id,class，标签…选择器)’),返回的是一个列表。<br>    标签什么都不加，class前面加. id前面加#</p><p>   层级选择器:<br>    &gt;表示的是一个层级；空格表示的多个层级<br>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">   soup.select( <span class="hljs-string">&#x27;.tang &gt; ul &gt; li &gt; a&#x27;</span>) <br>   soup.select( <span class="hljs-string">&#x27;.tang &gt;ul a&#x27;</span>)<br>   结果为：[<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span> <span class="hljs-attr">title</span>= <span class="hljs-string">&quot;ging&quot;</span>&gt;</span>清明时节雨纷纷,路上行人欲断魂,借问酒家何处有,牧童遥指杏花村<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>,<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.163.com&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;qin&quot;</span>&gt;</span>秦时明月汉时关，万里长征人未还,但使龙城飞将在，不教胡马度阴山<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>,<br>   <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot; http://ww.126.com&quot;</span><span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;qi &quot;</span>&gt;</span>歧王宅里寻常见，崔九堂前几度闻，正是江南好风景,落花时节又逢君<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>,<br>   <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http: //www.sina.com&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;du&quot;</span>&gt;</span>杜甫<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>,<br>   <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.dudu.com&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;du&quot;</span>&gt;</span>杜牧<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>,<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://ww.hana.com”id=&quot;</span><span class="hljs-attr">feng</span>&quot;&gt;</span>凤凰台上凤凰游，凤去台空江自流，吴宫花草埋幽径，晋代衣冠成古丘<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>]<br></code></pre></td></tr></table></figure><br><strong>5</strong>.获取标签之间的文本数据:<br>    -soup.a.text/string/get_text()<br>    -text/get_text():可以获取某一个标签中所有的文本内容<br>    -string:只可以获取该标签下面直系的文本内容<br><strong>6</strong>.获取标签中属性值:<br>soup.a[‘属性值’]</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(soup.select( <span class="hljs-string">&#x27;.tang &gt; ul &gt; li &gt; a&#x27;</span>)</span></span> <span class="hljs-selector-attr">[0]</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;href&#x27;</span>]</span>)<br>结果：<br>www<span class="hljs-selector-class">.baidu</span>.com<br></code></pre></td></tr></table></figure><h1 id="xpath解析"><a href="#xpath解析" class="headerlink" title="xpath解析"></a>xpath解析</h1><p>最常用且最便捷高效的一种解析方式。通用性。</p><h2 id="xpath解析原理"><a href="#xpath解析原理" class="headerlink" title="xpath解析原理:"></a>xpath解析原理:</h2><p>1.实例化一个etree的对象，且需要将被解析的页面源码数据加载到该对象中。<br>2调用etree对象中的xpath方法结合着xpath表达式实现标签的定位和内容的捕获。</p><h2 id="实例化一个etree对象"><a href="#实例化一个etree对象" class="headerlink" title="实例化一个etree对象:"></a>实例化一个etree对象:</h2><p>from lxml import etree<br>    -1.将本地的html文档中的源码数据加载到etree对象中:<br>    <figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">etree.parse<span class="hljs-comment">(filePath)</span><br></code></pre></td></tr></table></figure><br>    -2.可以将从互联网上获取的源码数据加载到该对象中<br>       <figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">etree</span><span class="hljs-selector-class">.HTML</span>( <span class="hljs-string">&#x27;page_text&#x27;</span>)<br></code></pre></td></tr></table></figure></p><h2 id="xpath-‘xpath表达式’"><a href="#xpath-‘xpath表达式’" class="headerlink" title="xpath( ‘xpath表达式’)"></a>xpath( ‘xpath表达式’)</h2><p>xpath表达式:(返回一个列表)<br>-/:表示的是从根节点开始定位。表示的是一个层级。<br>-//:表示的是多个层级。可以表示从任意位置开始定位。<br>-属性定位://div[@class=’song’] tag[@attrname=’attrvalue’]<br>-索引定位：//div[@class=’song’]/p[3]<br>索引从1开始的</p><p>取文本:</p><ul><li>/text(）获取的是标签中直系的文本内容</li><li>//text(标签中非直系的文本内容(所有的文本内容)</li></ul><p>取属性:<br>/@attrName<br>eg:/img/@src</p><p>./表示定位到当前位置（局部解析）</p><p>多个xpath之间用|分割:<br>tree.xpath(‘//div[@class=’song’]/p[3] | //div[@class=’song’]’)</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>bs4</tag>
      
      <tag>xpath</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式和re库</title>
    <link href="/2022/01/31/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2022/01/31/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="相关网站"><a href="#相关网站" class="headerlink" title="相关网站"></a>相关网站</h1><p><a href="https://tool.oschina.net/regex/">正则表达式测试</a><br><a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/12.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.md">正则表达式部分笔记</a><br><a href="https://www.bilibili.com/video/BV1i54y1h75W">b站网课</a></p><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>一种使用表达式的方式对字符串进行匹配的的语法规则</p><h2 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h2><p>在python爬虫中数据解析部分，解析的局部的文本内容都会在标签之间或者标签对应的属性中进行存储，当要对存储的信息进行提取时，就要用到正则表达式。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>使用元字符进行排列组合用来匹配字符串</p><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p>具有固定含义的特殊符号（默认匹配一位）</p><table><thead><tr><th>元字符</th><th align="left">含义</th></tr></thead><tbody><tr><td>.</td><td align="left">匹配除换行符以外的任意字符</td></tr><tr><td>\w</td><td align="left">匹配字母或数字或下划线</td></tr><tr><td>\s</td><td align="left">匹配任意的空白符</td></tr><tr><td>\d</td><td align="left">匹配数字</td></tr><tr><td>\n</td><td align="left">匹配一个换行符</td></tr><tr><td>\t</td><td align="left">匹配一个制表符</td></tr><tr><td>^</td><td align="left">匹配字符串的开始</td></tr><tr><td>$</td><td align="left">匹配字符串的结尾</td></tr><tr><td>\W</td><td align="left">匹配非字母或数字或下划线</td></tr><tr><td>\D</td><td align="left">匹配非数字</td></tr><tr><td>\S</td><td align="left">匹配非空白符</td></tr><tr><td>a|b</td><td align="left">匹配字符α或字符b</td></tr><tr><td>()</td><td align="left">匹配括号内的表达式，也表示一个组</td></tr><tr><td>[…]</td><td align="left">匹配字符组中的字符（a-z代表a到z所有的字母)</td></tr><tr><td>[^…]</td><td align="left">匹配除了字符组中字符的所有字符</td></tr><tr><td>### 例子</td><td align="left"></td></tr><tr><td><figure class="highlight taggerscript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs taggerscript">eg：a11111<br>^<span class="hljs-symbol">\d</span><span class="hljs-symbol">\d</span><span class="hljs-symbol">\d</span><span class="hljs-symbol">\d</span><span class="hljs-symbol">\d</span> 无匹配结果<br><br>eg：11111a<br><span class="hljs-symbol">\d</span><span class="hljs-symbol">\d</span><span class="hljs-symbol">\d</span><span class="hljs-symbol">\d</span><span class="hljs-symbol">\d</span>$ 无匹配结果<br><br>eg：我的电话是：10010<br>[我10]  我 1 0 0 1 0<br></code></pre></td></tr></table></figure></td><td align="left"></td></tr><tr><td>## 量词</td><td align="left"></td></tr><tr><td>控制前面的元字符出现的次数</td><td align="left"></td></tr></tbody></table><table><thead><tr><th>量词</th><th align="left">含义</th></tr></thead><tbody><tr><td>*</td><td align="left">重复零次或更多次</td></tr><tr><td>+</td><td align="left">重复一次或更多次</td></tr><tr><td>？</td><td align="left">重复零次或一次</td></tr><tr><td>{n}</td><td align="left">重复n次</td></tr><tr><td>{n，}</td><td align="left">重复n次或更多次</td></tr><tr><td>{n，m}</td><td align="left">重复n到m次</td></tr></tbody></table><h2 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h2><p>.* 贪婪匹配<br>.*?懒惰匹配<br>在python爬虫中一般使用懒惰匹配</p><h1 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h1><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>pattern:正则表达式 ；string：字符串;flags：状态位，可嵌入的规则（re.S,re.M等）</p><table><thead><tr><th>函数</th><th align="left">含义</th></tr></thead><tbody><tr><td>compile(pattern, flags=0)</td><td align="left">编译正则表达式返回正则表达式对象（预加载正则表达式）</td></tr><tr><td>match(pattern, string, flags=0)</td><td align="left">用正则表达式匹配字符串，从头开始匹配 成功返回匹配对象 否则返回None</td></tr><tr><td>search(pattern, string, flags=0)</td><td align="left">搜索字符串中第一次出现正则表达式的模式 成功返回匹配对象 否则返回None</td></tr><tr><td>split(pattern, string, maxsplit=0, flags=0)</td><td align="left">用正则表达式指定的模式分隔符拆分字符串 返回列表</td></tr><tr><td>sub(pattern, repl, string, count=0, flags=0)</td><td align="left">用指定的字符串替换原字符串中与正则表达式匹配的模式 可以用count指定替换的次数</td></tr><tr><td>fullmatch(pattern, string, flags=0)</td><td align="left">match函数的完全匹配（从字符串开头到结尾）版本</td></tr><tr><td>findall(pattern, string, flags=0)</td><td align="left">查找字符串所有与正则表达式匹配的模式 返回字符串的列表</td></tr><tr><td>finditer(pattern, string, flags=0)</td><td align="left">查找字符串所有与正则表达式匹配的模式 返回一个迭代器，从迭代器拿到内容</td></tr><tr><td>purge()</td><td align="left">清除隐式编译的正则表达式的缓存</td></tr><tr><td>re.I / re.IGNORECASE</td><td align="left">忽略大小写匹配标记</td></tr><tr><td>re.M / re.MULTILINE</td><td align="left">多行匹配标记</td></tr><tr><td>re.S</td><td align="left">单行匹配标记</td></tr><tr><td>（？P&lt;分组名字&gt;正则）</td><td align="left">可以单独从正则匹配的内容中进一步提取内容（p要大写）</td></tr></tbody></table><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>1.findall（）返回列表形式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">ls=re.fiindall(<span class="hljs-string">r'\d+'</span>,<span class="hljs-string">"我的电话是：10086,他的电话是：10010."</span>)<br><span class="hljs-built_in">print</span>(ls)<br><br><span class="hljs-comment">#['10086','10010']</span><br></code></pre></td></tr></table></figure><p>2.finditer()返回迭代器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">it=re.fiindall(<span class="hljs-string">r'\d+'</span>,<span class="hljs-string">"我的电话是：10086,他的电话是：10010."</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> it:<br><span class="hljs-built_in">print</span>(i.group())<br><br><span class="hljs-comment">#10086</span><br> <span class="hljs-number">10010</span><br></code></pre></td></tr></table></figure><p>3.search()返回match对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">ls=re.search(<span class="hljs-string">r'\d+'</span>,<span class="hljs-string">"我的电话是：10086,他的电话是：10010."</span>)<br><span class="hljs-built_in">print</span>(ls.group())<br><br><span class="hljs-comment">#10086 </span><br>只返回第一个结果<br></code></pre></td></tr></table></figure><p>4.match()从头开始匹配，与search()类似</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">ls=re.match(<span class="hljs-string">r'\d+'</span>,<span class="hljs-string">"10086,他的电话是：10010."</span>)<br><span class="hljs-built_in">print</span>(ls.group())<br><span class="hljs-comment">#10086 </span><br>ls=re.match(<span class="hljs-string">r'\d+'</span>,<span class="hljs-string">"我的电话是：10086,他的电话是：10010."</span>)<br><span class="hljs-built_in">print</span>(ls.group())<br><br><span class="hljs-comment">#报错</span><br><br></code></pre></td></tr></table></figure><p>5.compile()预加载正则表达式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">obj = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r'\d'</span>)<br>ret = obj.finditer(<span class="hljs-string">"我的电话号是:10086，我女朋友的电话是:10010"</span>)<br><span class="hljs-keyword">for</span> it <span class="hljs-keyword">in</span> ret:<br><span class="hljs-built_in">print</span>(it.group())<br>ret = obj.findall(<span class="hljs-string">"人口1000000"</span>)<br><span class="hljs-built_in">print</span>(ret)<br><br><span class="hljs-comment">#10086 10010</span><br><span class="hljs-comment">#['1000000']</span><br></code></pre></td></tr></table></figure><p>6.（？P&lt;分组名字&gt;正则）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml">s="<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'a'</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'1'</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'b'</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'2'</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'c'</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'3'</span>&gt;</span>王五<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'d'</span> &gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'4'</span>&gt;</span>库里<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'e'</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'5'</span>&gt;</span>汤普森<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>"<br>obj = re.compile(r"<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'.*?'</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">' (?P&lt;id&gt;\d+) '</span>&gt;</span>(?P<span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>.*?)<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>",re.S)<br>result = obj.finditer(s)<br>for it in result:<br>print(it.group( "name"))<br>print(it.group("id"))<br><br>#张三 1<br> 李四 2<br> 王五 3<br> 库里 4<br> 汤普森 5<br></code></pre></td></tr></table></figure><p>7.re.S 将字符串作为一个整体匹配</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros">a = <span class="hljs-string">"hello123</span><br><span class="hljs-string">world"</span><br>b = re.findall(<span class="hljs-string">'hello(.*?)world'</span>,a)<br>c = re.findall(<span class="hljs-string">'hello(.*?)world'</span>,a,re.S)<br><span class="hljs-builtin-name">print</span> (<span class="hljs-string">'b = '</span> , b)<br><span class="hljs-builtin-name">print</span> (<span class="hljs-string">'c = '</span> , c)<br><br><span class="hljs-comment"># b =[] 空列表</span><br><span class="hljs-comment"># c =['123']</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>正则表达式</tag>
      
      <tag>re库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>写在开始</title>
    <link href="/2022/01/21/hello-world/"/>
    <url>/2022/01/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>世界很大，城市很闹，幸好还有一个无人知晓的博客</p><h2 id="这里有什么"><a href="#这里有什么" class="headerlink" title="这里有什么"></a>这里有什么</h2><p>这里汇聚了许多无用而且多此一举的个人想法，希望你在这未被开垦过的荒野玩的愉快，欢迎留下足迹！</p><p>IT相关文档和随笔会同步到这，欢迎阅读。</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>自己生活中总是有着无数思考与想法，想要记录下来，于是便有了创建自己博客的念头。希望今后的某天望着自己的博客，能感到满足与自豪。</p><h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><p>原本热爱于生物的我，阴差阳错的选择了计算机专业，第一次用c语言写出hello world，总感觉一个生命由我创造而来，幻想到自己写出庞大复杂的项目…嗯这种感觉真不错，在经过一年的大学学习，逐渐意识到与各类大佬的差距，也努力向上，不希望成为那井底之蛙。这个世界是残酷的，没人会怜悯无用之人。<br>没点真正的实力，谁又愿意记住你？</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>在这偌大的互联网，开辟一片属于自己的空间，记录这自己的笔记以及随想。<br>或许三年后，或许十年后，这里一片荒芜，也有可能繁花似锦，那时的我可能成为自己想要的样子，也有可能一事无成，只是希望不愧青春。<br>谢谢你读到这，祝你我前程似锦！</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
      <tag>感想</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
