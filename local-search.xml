<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/2022/01/31/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2022/01/31/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="相关网站"><a href="#相关网站" class="headerlink" title="相关网站"></a>相关网站</h1><p><a href="https://tool.oschina.net/regex/">正则表达式测试</a><br><a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/12.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.md">正则表达式部分笔记</a><br><a href="https://www.bilibili.com/video/BV1i54y1h75W">b站网课</a></p><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>一种使用表达式的方式对字符串进行匹配的的语法规则</p><h2 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h2><p>在python爬虫中数据解析部分，解析的局部的文本内容都会在标签之间或者标签对应的属性中进行存储，当要对存储的信息进行提取时，就要用到正则表达式。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>使用元字符进行排列组合用来匹配字符串</p><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p>具有固定含义的特殊符号（默认匹配一位）</p><table><thead><tr><th>元字符</th><th align="left">含义</th></tr></thead><tbody><tr><td>.</td><td align="left">匹配除换行符以外的任意字符</td></tr><tr><td>\w</td><td align="left">匹配字母或数字或下划线</td></tr><tr><td>\s</td><td align="left">匹配任意的空白符</td></tr><tr><td>\d</td><td align="left">匹配数字</td></tr><tr><td>\n</td><td align="left">匹配一个换行符</td></tr><tr><td>\t</td><td align="left">匹配一个制表符</td></tr><tr><td>^</td><td align="left">匹配字符串的开始</td></tr><tr><td>$</td><td align="left">匹配字符串的结尾</td></tr><tr><td>\W</td><td align="left">匹配非字母或数字或下划线</td></tr><tr><td>\D</td><td align="left">匹配非数字</td></tr><tr><td>\S</td><td align="left">匹配非空白符</td></tr><tr><td>a|b</td><td align="left">匹配字符α或字符b</td></tr><tr><td>()</td><td align="left">匹配括号内的表达式，也表示一个组</td></tr><tr><td>[…]</td><td align="left">匹配字符组中的字符（a-z代表a到z所有的字母)</td></tr><tr><td>[^…]</td><td align="left">匹配除了字符组中字符的所有字符</td></tr></tbody></table><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight taggerscript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs taggerscript">eg：a11111<br>^<span class="hljs-symbol">\d</span><span class="hljs-symbol">\d</span><span class="hljs-symbol">\d</span><span class="hljs-symbol">\d</span><span class="hljs-symbol">\d</span> 无匹配结果<br><br>eg：11111a<br><span class="hljs-symbol">\d</span><span class="hljs-symbol">\d</span><span class="hljs-symbol">\d</span><span class="hljs-symbol">\d</span><span class="hljs-symbol">\d</span>$ 无匹配结果<br><br>eg：我的电话是：10010<br>[我10]  我 1 0 0 1 0<br></code></pre></td></tr></table></figure><h2 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h2><p>控制前面的元字符出现的次数</p><table><thead><tr><th>量词</th><th align="left">含义</th></tr></thead><tbody><tr><td>*</td><td align="left">重复零次或更多次</td></tr><tr><td>+</td><td align="left">重复一次或更多次</td></tr><tr><td>？</td><td align="left">重复零次或一次</td></tr><tr><td>{n}</td><td align="left">重复n次</td></tr><tr><td>{n，}</td><td align="left">重复n次或更多次</td></tr><tr><td>{n，m}</td><td align="left">重复n到m次</td></tr></tbody></table><h2 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h2><p>.* 贪婪匹配<br>.*?懒惰匹配<br>在python爬虫中一般使用懒惰匹配</p><h1 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h1><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>pattern:正则表达式 ；string：字符串;flags：状态位，可嵌入的规则（re.S,re.M等）<br>|函数     | 含义|<br>|——– | :—–|<br>|compile(pattern, flags=0)    |编译正则表达式返回正则表达式对象（预加载正则表达式）|<br>|match(pattern, string, flags=0)    |用正则表达式匹配字符串，从头开始匹配 成功返回匹配对象 否则返回None||<br>|search(pattern, string, flags=0)    |搜索字符串中第一次出现正则表达式的模式 成功返回匹配对象 否则返回None|<br>|split(pattern, string, maxsplit=0, flags=0)|    用正则表达式指定的模式分隔符拆分字符串 返回列表|<br>|sub(pattern, repl, string, count=0, flags=0)|    用指定的字符串替换原字符串中与正则表达式匹配的模式 可以用count指定替换的次数|<br>|fullmatch(pattern, string, flags=0)|    match函数的完全匹配（从字符串开头到结尾）版本|<br>|findall(pattern, string, flags=0)    |查找字符串所有与正则表达式匹配的模式 返回字符串的列表|<br>|finditer(pattern, string, flags=0)    |查找字符串所有与正则表达式匹配的模式 返回一个迭代器，从迭代器拿到内容|<br>|purge()    |清除隐式编译的正则表达式的缓存|<br>|re.I / re.IGNORECASE    |忽略大小写匹配标记|<br>|re.M / re.MULTILINE    |多行匹配标记|<br>|re.S| 单行匹配标记|<br>|（？P&lt;分组名字&gt;正则）|可以单独从正则匹配的内容中进一步提取内容（p要大写）|</p><h2 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h2><p>1.findall（）返回列表形式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">ls=re.fiindall(<span class="hljs-string">r&#x27;\d+&#x27;</span>,<span class="hljs-string">&quot;我的电话是：10086,他的电话是：10010.&quot;</span>)<br><span class="hljs-built_in">print</span>(ls)<br><br><span class="hljs-comment">#[&#x27;10086&#x27;,&#x27;10010&#x27;]</span><br></code></pre></td></tr></table></figure><p>2.finditer()返回迭代器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">it=re.fiindall(<span class="hljs-string">r&#x27;\d+&#x27;</span>,<span class="hljs-string">&quot;我的电话是：10086,他的电话是：10010.&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> it:<br><span class="hljs-built_in">print</span>(i.group())<br><br><span class="hljs-comment">#10086</span><br> <span class="hljs-number">10010</span><br></code></pre></td></tr></table></figure><p>3.search()返回match对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">ls=re.search(<span class="hljs-string">r&#x27;\d+&#x27;</span>,<span class="hljs-string">&quot;我的电话是：10086,他的电话是：10010.&quot;</span>)<br><span class="hljs-built_in">print</span>(ls.group())<br><br><span class="hljs-comment">#10086 </span><br>只返回第一个结果<br></code></pre></td></tr></table></figure><p>4.match()从头开始匹配，与search()类似</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">ls=re.match(<span class="hljs-string">r&#x27;\d+&#x27;</span>,<span class="hljs-string">&quot;10086,他的电话是：10010.&quot;</span>)<br><span class="hljs-built_in">print</span>(ls.group())<br><span class="hljs-comment">#10086 </span><br>ls=re.match(<span class="hljs-string">r&#x27;\d+&#x27;</span>,<span class="hljs-string">&quot;我的电话是：10086,他的电话是：10010.&quot;</span>)<br><span class="hljs-built_in">print</span>(ls.group())<br><br><span class="hljs-comment">#报错</span><br><br></code></pre></td></tr></table></figure><p>5.compile()预加载正则表达式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">obj = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;\d&#x27;</span>)<br>ret = obj.finditer(<span class="hljs-string">&quot;我的电话号是:10086，我女朋友的电话是:10010&quot;</span>)<br><span class="hljs-keyword">for</span> it <span class="hljs-keyword">in</span> ret:<br><span class="hljs-built_in">print</span>(it.group())<br>ret = obj.findall(<span class="hljs-string">&quot;人口1000000&quot;</span>)<br><span class="hljs-built_in">print</span>(ret)<br><br><span class="hljs-comment">#10086 10010</span><br><span class="hljs-comment">#[&#x27;1000000&#x27;]</span><br></code></pre></td></tr></table></figure><p>6.（？P&lt;分组名字&gt;正则）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml">s=&quot;<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;a&#x27;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;1&#x27;</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;b&#x27;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;2&#x27;</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;c&#x27;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;3&#x27;</span>&gt;</span>王五<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;d&#x27;</span> &gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;4&#x27;</span>&gt;</span>库里<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;e&#x27;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;5&#x27;</span>&gt;</span>汤普森<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&quot;<br>obj = re.compile(r&quot;<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;.*?&#x27;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27; (?P&lt;id&gt;\d+) &#x27;</span>&gt;</span>(?P<span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>.*?)<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&quot;,re.S)<br>result = obj.finditer(s)<br>for it in result:<br>print(it.group( &quot;name&quot;))<br>print(it.group(&quot;id&quot;))<br><br>#张三 1<br> 李四 2<br> 王五 3<br> 库里 4<br> 汤普森 5<br></code></pre></td></tr></table></figure><p>7.re.S 将字符串作为一个整体匹配</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros">a = <span class="hljs-string">&quot;hello123</span><br><span class="hljs-string">world&quot;</span><br>b = re.findall(<span class="hljs-string">&#x27;hello(.*?)world&#x27;</span>,a)<br>c = re.findall(<span class="hljs-string">&#x27;hello(.*?)world&#x27;</span>,a,re.S)<br><span class="hljs-builtin-name">print</span> (<span class="hljs-string">&#x27;b = &#x27;</span> , b)<br><span class="hljs-builtin-name">print</span> (<span class="hljs-string">&#x27;c = &#x27;</span> , c)<br><br><span class="hljs-comment"># b =[] 空列表</span><br><span class="hljs-comment"># c =[&#x27;123&#x27;]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>正则表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>写在开始</title>
    <link href="/2022/01/21/hello-world/"/>
    <url>/2022/01/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>世界很大，城市很闹，幸好还有一个无人知晓的博客</p><h2 id="这里有什么"><a href="#这里有什么" class="headerlink" title="这里有什么"></a>这里有什么</h2><p>这里汇聚了许多无用而且多此一举的个人想法，希望你在这未被开垦过的荒野玩的愉快，欢迎留下足迹！</p><p>IT相关文档和随笔会同步到这，欢迎阅读。</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>自己生活中总是有着无数思考与想法，想要记录下来，于是便有了创建自己博客的念头。希望今后的某天望着自己的博客，能感到满足与自豪。</p><h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><p>原本热爱于生物的我，阴差阳错的选择了计算机专业，第一次用c语言写出hello world，总感觉一个生命由我创造而来，幻想到自己写出庞大复杂的项目…嗯这种感觉真不错，在经过一年的大学学习，逐渐意识到与各类大佬的差距，也努力向上，不希望成为那井底之蛙。这个世界是残酷的，没人会怜悯无用之人。<br>没点真正的实力，谁又愿意记住你？</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>在这偌大的互联网，开辟一片属于自己的空间，记录这自己的笔记以及随想。<br>或许三年后，或许十年后，这里一片荒芜，也有可能繁花似锦，那时的我可能成为自己想要的样子，也有可能一事无成，只是希望不愧青春。<br>谢谢你读到这，祝你我前程似锦！</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
      <tag>感想</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
